#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int codigo;
    char descricao[50];
    int quantidade;
    float valor;
} Produto;

typedef struct Node {
    Produto produto;
    struct Node* proximo;
} Node;

Node* inicializarLista() {
    return NULL;
}

Node* adicionarProduto(Node* lista, Produto novoProduto) {
    Node* novoNo = (Node*)malloc(sizeof(Node));
    novoNo->produto = novoProduto;
    novoNo->proximo = lista;
    return novoNo;
}

void imprimirRelatorio(Node* lista) {
    Node* atual = lista;
    while (atual != NULL) {
        printf("Código: %d\n", atual->produto.codigo);
        printf("Descrição: %s\n", atual->produto.descricao);
        printf("Quantidade: %d\n", atual->produto.quantidade);
        printf("Valor: %.2f\n\n", atual->produto.valor);
        atual = atual->proximo;
    }
}

Node* pesquisarProduto(Node* lista, int codigo) {
    Node* atual = lista;
    while (atual != NULL) {
        if (atual->produto.codigo == codigo) {
            return atual;
        }
        atual = atual->proximo;
    }
    return NULL;
}

Node* removerProduto(Node* lista, int codigo) {
    Node* atual = lista;
    Node* anterior = NULL;

    while (atual != NULL) {
        if (atual->produto.codigo == codigo) {
            if (anterior == NULL) {
                Node* novoInicio = atual->proximo;
                free(atual);
                return novoInicio;
            } else {
                anterior->proximo = atual->proximo;
                free(atual);
                return lista;
            }
        }
        anterior = atual;
        atual = atual->proximo;
    }

    return lista;
}

int main() {
    Node* estoque = inicializarLista();
    int opcao;

    do {
        printf("\nMenu:\n");
        printf("1. Adicionar Produto\n");
        printf("2. Imprimir Relatório\n");
        printf("3. Pesquisar Produto\n");
        printf("4. Remover Produto\n");
        printf("0. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1: {
                Produto novoProduto;
                printf("Digite o código do produto: ");
                scanf("%d", &novoProduto.codigo);
                printf("Digite a descrição do produto: ");
                scanf("%s", novoProduto.descricao);
                printf("Digite a quantidade do produto: ");
                scanf("%d", &novoProduto.quantidade);
                printf("Digite o valor do produto: ");
                scanf("%f", &novoProduto.valor);
                estoque = adicionarProduto(estoque, novoProduto);
                break;
            }
            case 2:
                imprimirRelatorio(estoque);
                break;
            case 3: {
                int codigo;
                printf("Digite o código do produto a ser pesquisado: ");
                scanf("%d", &codigo);
                Node* encontrado = pesquisarProduto(estoque, codigo);
                if (encontrado != NULL) {
                    printf("Produto encontrado:\n");
                    printf("Código: %d\n", encontrado->produto.codigo);
                    printf("Descrição: %s\n", encontrado->produto.descricao);
                    printf("Quantidade: %d\n", encontrado->produto.quantidade);
                    printf("Valor: %.2f\n", encontrado->produto.valor);
                } else {
                    printf("Produto não encontrado.\n");
                }
                break;
            }
            case 4: {
                int codigo;
                printf("Digite o código do produto a ser removido: ");
                scanf("%d", &codigo);
                estoque = removerProduto(estoque, codigo);
                break;
            }
            case 0:
                break;
            default:
                printf("Opção inválida. Tente novamente.\n");
        }

    } while (opcao != 0);

    while (estoque != NULL) {
        Node* proximo = estoque->proximo;
        free(estoque);
        estoque = proximo;
    }

    return 0;
}
